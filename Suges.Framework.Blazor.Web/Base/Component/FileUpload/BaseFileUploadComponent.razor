@inherits Suges.Framework.Blazor.Web.Base.BaseComponent

@using Suges.Framework.Blazor.Web.Base
@using Suges.Framework.Blazor.Web.Model
@using Suges.Framework.Model.Model.Enumerations;
@using Radzen.Blazor;

@using Microsoft.AspNetCore.Components;
@using Suges.Framework.Common.Log;
@using Suges.Framework.Common.Model.Data;
@using Suges.Framework.Common.Notification;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Inputs
<style>
   .e-custom.e-input-group.e-input-focus:not(.e-success):not(.e-warning):not(.e-error) {  
        box-shadow: 0 0 0 3px rgb(255 0 0 / 25%);  
        border-color: #e41616;  
    }  


    .e-file-drop
    {
        display:none;
    }
</style>
<div class="input-group">
    <div class="custom-file">
        <SfUploader style="display: none;"
                    Locale="tr"
                    AutoUpload="true"
                    AllowedExtensions="@acceptedFileTypes"
                    ShowFileList="false"
                    MaxFileSize="@MaxFileSize">
            <UploaderEvents ValueChange="HandleSelection"></UploaderEvents>
        </SfUploader>
    </div>
</div>
@if (
ActiveFileUploadModelList != null
&& ActiveFileUploadModelList.Count > 0)
{
    <RadzenGrid Data="ActiveFileUploadModelList">
        <Columns>
            <RadzenGridColumn TItem="FileUploadModel" Title="DOSYA ADI" Width="80%">
                <Template Context="fileUploadModel">
                    @if (!string.IsNullOrEmpty(fileUploadModel.FilePath))
                {
                    <a href="@fileUploadModel.FilePath" target="_blank" download>@fileUploadModel.Name</a>
                }
                else
                {
                    @fileUploadModel.Name
                }

            </Template>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="FileUploadModel">
            <Template Context="fileUploadModel">
                <RadzenButton Click="() => Delete(fileUploadModel)" Icon="delete" />
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>
}
@code {


    [Parameter]
    public string acceptedFileTypes { get; set; }


    [Parameter]
    public int MaxFileSize { get; set; }

    [Parameter]
    public int MaxFileCount { get; set; }


    [Parameter]
    public List<FileUploadModel> fileUploadModelList { get; set; }



    [Inject]
    protected INotification Notification { get; set; }

    [Inject]
    protected IBaseLog Log { get; set; }

    public BaseFileUploadComponent()
    {
        if (string.IsNullOrEmpty(acceptedFileTypes))
        {
            acceptedFileTypes = ".csv,.xlsx";
        }
        MaxFileCount = 1;
        MaxFileSize = 5 * 1024 * 1024; // 5MB
    }

    public List<FileUploadModel> ActiveFileUploadModelList
    {
        get
        {
            if (fileUploadModelList != null)
            {
                return fileUploadModelList.Where(x => x.IsDeleted == YesNoEnum.No).ToList();
            }
            else
            {
                return new List<FileUploadModel>();
            }
        }
    }

    public async Task HandleSelection(UploadChangeEventArgs args)
    {

        BaseResponseModel result = new BaseResponseModel();
        result.Result = ResultEnum.Success;


        BaseResponseModel checkResult;
        foreach (UploadFiles fileListEntry in args.Files)
        {

            checkResult = CheckFileCount();
            if (checkResult.Result != ResultEnum.Success)
            {
                result.Result = ResultEnum.Error;
                result.MessageList.AddRange(checkResult.MessageList);

                break;
            }


            checkResult = CheckFileExtension(fileListEntry);
            if (checkResult.Result != ResultEnum.Success)
            {
                result.Result = ResultEnum.Error;
                result.MessageList.AddRange(checkResult.MessageList);

                continue;
            }

            checkResult = CheckFileExist(fileListEntry);
            if (checkResult.Result != ResultEnum.Success)
            {
                result.Result = ResultEnum.Error;
                result.MessageList.AddRange(checkResult.MessageList);

                continue;
            }

            checkResult = CheckFileSize(fileListEntry);
            if (checkResult.Result != ResultEnum.Success)
            {
                result.Result = ResultEnum.Error;
                result.MessageList.AddRange(checkResult.MessageList);

                continue;
            }


            FileUploadModel fileUploadModel = new FileUploadModel();
            fileUploadModel.IsDeleted = YesNoEnum.No;
            fileUploadModel.Name = fileListEntry.FileInfo.Name;

            fileUploadModel.File = fileListEntry.Stream.ToArray();
            fileUploadModelList.Add(fileUploadModel);
        }

        if (result.Result == ResultEnum.Success)
        {
            Notification.ShowSuccessMessage("Dosya başarı ile yüklendi.", string.Empty);
        }
        else
        {
            Log.Error(result.ErrorText);
            Notification.ShowErrorMessage("Dosya yüklenirken bir hata oluştu.", result.MessageList.FirstOrDefault());
        }
    }

    public void Delete(FileUploadModel fileUploadModel)
    {
        if (fileUploadModel.FileUploadModelID < 1)
        {
            fileUploadModelList.Remove(fileUploadModel);
        }
        else
        {
            fileUploadModel.IsDeleted = YesNoEnum.Yes;
        }
        StateHasChanged();
    }

    private BaseResponseModel CheckFileExist(UploadFiles fileListEntry)
    {

        BaseResponseModel baseResponseModel = new BaseResponseModel();
        if (fileUploadModelList.Any(x => x.Name == fileListEntry.FileInfo.Name))
        {
            baseResponseModel.Result = ResultEnum.Error;
            baseResponseModel.MessageList.Add($"{fileListEntry.FileInfo.Name} dosyası sisteme daha önce eklenmiş");
        }
        else
        {
            baseResponseModel.Result = ResultEnum.Success;

        }
        return baseResponseModel;
    }
    private BaseResponseModel CheckFileSize(UploadFiles fileListEntry)
    {
        BaseResponseModel baseResponseModel = new BaseResponseModel();
        if (fileListEntry.FileInfo.Size > MaxFileSize)
        {
            baseResponseModel.Result = ResultEnum.Error;
            baseResponseModel.MessageList.Add($"{fileListEntry.FileInfo.Name} dosyası için izin verilen max boyut: {MaxFileSize / 1024 * 1024} MB");
        }
        else
        {
            baseResponseModel.Result = ResultEnum.Success;

        }
        return baseResponseModel;
    }
    private BaseResponseModel CheckFileExtension(UploadFiles fileListEntry)
    {
        BaseResponseModel baseResponseModel = new BaseResponseModel();
        bool isExist = false;




        //foreach (string extension in acceptedFileTypes)
        //{
        //    if (fileListEntry.FileInfo.Name.EndsWith(extension))
        //    {
        //        isExist = true;
        //        break;
        //    }
        //}
        //if (!isExist)
        //{
        //    baseResponseModel.Result = ResultEnum.Error;
        //    baseResponseModel.MessageList.Add($"{fileListEntry.FileInfo.Name} dosyası için izin verilen uzantıda değil.");
        //}
        //else
        //{
        //    baseResponseModel.Result = ResultEnum.Success;

        //}
        return baseResponseModel;
    }
    private BaseResponseModel CheckFileCount()
    {
        BaseResponseModel baseResponseModel = new BaseResponseModel();
        if (fileUploadModelList.Count >= MaxFileCount)
        {
            baseResponseModel.Result = ResultEnum.Error;
            baseResponseModel.MessageList.Add($"Dosya sayısı için izin verilen sayıyı aştınız.");
        }
        else
        {
            baseResponseModel.Result = ResultEnum.Success;

        }
        return baseResponseModel;
    }
}